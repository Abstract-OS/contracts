[workspace]
members = [
    "packages/*",
    "contracts/native/*",
    "contracts/core/*",
    # "contracts/testing",
    "contracts/token",
    "contracts/modules/apps/etf",
    "contracts/modules/apps/subscription",
    "contracts/modules/apis/tendermint-staking",
    "contracts/modules/apis/dex",
    "contracts/modules/perks/vesting",
    "contracts/ibc-hosts/osmosis",
    "scripts"
]

# Enable the version 2 feature resolver, which avoids unifying features for targets that are not being built
#
# Critically this prevents dev-dependencies from enabling features even when not building a target that
# uses dev-dependencies, e.g. the library crate. This in turn ensures that we can catch invalid feature
# flag combinations that would otherwise only surface in dependent crates
#
# Reference - https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2
# See - https://github.com/apache/arrow-rs/pull/1822/files
resolver = "2"

[workspace.package]
version = "0.4.3"
authors = ["CyberHoward <cyberhoward@protonmail.com>", "Riada <riada@abstract.money>", "Abstract Money <contact@abstract.money>"]
edition = "2021"
homepage = "https://abstract.money"
documentation = "https://docs.abstract.money/"
repository = "https://github.com/Abstract-OS/contracts"
license = "GPL-3.0-or-later"
keywords = ["cosmos", "cosmwasm", "framework"]

[workspace.dependencies]
cosmwasm-std = { version = "1.1" }
cosmwasm-schema = { version = "1.1" }
cw-controllers = { version = "1.0.1" }
cw-utils = { version = "1.0" }
cw-storage-plus = "1.0.1"
cw2 = { version = "1.0.1" }
cw20 = { version = "1.0.1" }
cw20-base = { version = "1.0.1", features = ["library"] }
cw-asset = { version = "2.2" }
schemars = "0.8"
serde = { version = "1.0", default-features = false, features = ["derive"] }
thiserror = { version = "1.0" }
protobuf = { version = "2", features = ["with-bytes"] }

semver = { package = "cw-semver", version = "1.0.0", git = "https://github.com/Abstract-OS/cw-semver.git" }
boot-core = { version = "0.3.0", git = "https://github.com/Abstract-OS/BOOT.git", branch = "add/mock-test-helpers" }
boot-cw-plus = { version = "0.2.0", git = "https://github.com/Abstract-OS/BOOT.git" }

abstract-sdk = { version = "0.4.3", path = "packages/abstract-sdk" }
abstract-os = { version = "0.4.3", path = "packages/abstract-os" }
abstract-app = { version = "0.4.3", path = "packages/abstract-app", features = ["library"] }
abstract-api = { version = "0.4.3", path = "packages/abstract-api", features = ["library"] }
abstract-ibc-host = { version = "0.4.3", path = "packages/abstract-ibc-host" }
abstract-ica = { version = "0.4.3", path = "packages/abstract-ica" }
abstract-testing = { path = "packages/abstract-testing" }
abstract-boot = { path = "packages/abstract-boot" }


module-factory = { path = "contracts/native/module-factory", features = ["library"] }
os-factory = { path = "contracts/native/os-factory", features = ["library"] }
ans-host = { path = "contracts/native/ans-host", features = ["library"] }
version-control = { path = "contracts/native/version-control", features = ["library"] }
osmosis-host = { path = "contracts/ibc-hosts/osmosis", features = ["library"] }
proxy = { path = "contracts/core/proxy", features = ["library"] }
manager = {path = "contracts/core/manager",features = ["library"]}
ibc-client = {path = "contracts/native/ibc-client",features = ["library"]}
etf = {path = "contracts/modules/apps/etf",features = ["library"]}
subscription = {path = "contracts/modules/apps/subscription",features = ["library"]}


## Testing
# cw-multi-test = { git = "https://github.com/Abstract-OS/cw-plus.git", branch = "main" }
cw-multi-test = { version = "0.16.2" }
rstest = "0.16.0"
speculoos = "0.11.0"
anyhow = "1"

[profile.release]
rpath = false
lto = true
overflow-checks = true
opt-level = 3
debug = false
debug-assertions = false
codegen-units = 1
panic = 'abort'
incremental = false
