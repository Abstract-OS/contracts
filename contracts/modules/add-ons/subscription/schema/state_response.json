{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "StateResponse",
  "type": "object",
  "required": [
    "contribution",
    "subscription"
  ],
  "properties": {
    "contribution": {
      "$ref": "#/definitions/ContributionState"
    },
    "subscription": {
      "$ref": "#/definitions/SubscriptionState"
    }
  },
  "definitions": {
    "ContributionState": {
      "type": "object",
      "required": [
        "emissions",
        "expense",
        "next_pay_day",
        "target",
        "total_weight"
      ],
      "properties": {
        "emissions": {
          "description": "total emissions for this month",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "expense": {
          "description": "expense the org is able to make based on the income, target and splitS",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "next_pay_day": {
          "description": "time of next payout",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "target": {
          "description": "Target income to pay base salaries",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "total_weight": {
          "description": "total weights for token emission allocations",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "SubscriptionState": {
      "type": "object",
      "required": [
        "active_subs",
        "collected",
        "income"
      ],
      "properties": {
        "active_subs": {
          "description": "amount of active subscribers",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "collected": {
          "description": "Is the income collected?",
          "type": "boolean"
        },
        "income": {
          "description": "Total income for the last month",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
