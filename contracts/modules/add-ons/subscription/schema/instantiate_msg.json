{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base",
    "contribution",
    "subscription"
  ],
  "properties": {
    "base": {
      "$ref": "#/definitions/AddOnInstantiateMsg"
    },
    "contribution": {
      "$ref": "#/definitions/ContributionInstantiateMsg"
    },
    "subscription": {
      "$ref": "#/definitions/SubscriptionInstantiateMsg"
    }
  },
  "definitions": {
    "AddOnInstantiateMsg": {
      "type": "object",
      "required": [
        "memory_address"
      ],
      "properties": {
        "memory_address": {
          "description": "Used by Module Factory to instantiate AddOn",
          "type": "string"
        }
      }
    },
    "AssetInfoBase_for_String": {
      "description": "Represents the type of an fungible asset\n\nEach **asset info** instance can be one of two variants:\n\n- CW20 tokens. To create an **asset info** instance of this type, provide the contract address. - Native SDK coins. To create an **asset info** instance of this type, provide the denomination.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ContributionInstantiateMsg": {
      "type": "object",
      "required": [
        "base_denom",
        "emission_user_share",
        "emissions_amp_factor",
        "emissions_offset",
        "max_emissions_multiple",
        "project_token",
        "protocol_income_share"
      ],
      "properties": {
        "base_denom": {
          "type": "string"
        },
        "emission_user_share": {
          "$ref": "#/definitions/Decimal"
        },
        "emissions_amp_factor": {
          "$ref": "#/definitions/Uint128"
        },
        "emissions_offset": {
          "$ref": "#/definitions/Uint128"
        },
        "max_emissions_multiple": {
          "$ref": "#/definitions/Decimal"
        },
        "project_token": {
          "type": "string"
        },
        "protocol_income_share": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SubscriptionInstantiateMsg": {
      "type": "object",
      "required": [
        "factory_addr",
        "payment_asset",
        "subscription_cost",
        "version_control_addr"
      ],
      "properties": {
        "factory_addr": {
          "type": "string"
        },
        "payment_asset": {
          "$ref": "#/definitions/AssetInfoBase_for_String"
        },
        "subscription_cost": {
          "$ref": "#/definitions/Uint64"
        },
        "version_control_addr": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
