{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Execute function entrypoint.",
  "oneOf": [
    {
      "description": "Handler called by the CW-20 contract on a send-call",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "admin": {
              "description": "New admin",
              "type": [
                "string",
                "null"
              ]
            },
            "memory_contract": {
              "description": "New memory contract",
              "type": [
                "string",
                "null"
              ]
            },
            "module_factory_address": {
              "description": "New module factory contract",
              "type": [
                "string",
                "null"
              ]
            },
            "subscription_address": {
              "description": "New subscription contract",
              "type": [
                "string",
                "null"
              ]
            },
            "version_control_contract": {
              "description": "New version control contract",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creates the core contracts and sets the permissions. [`crate::manager`] and [`crate::proxy`]",
      "type": "object",
      "required": [
        "create_os"
      ],
      "properties": {
        "create_os": {
          "type": "object",
          "required": [
            "governance",
            "name"
          ],
          "properties": {
            "description": {
              "type": [
                "string",
                "null"
              ]
            },
            "governance": {
              "description": "Governance details Use [`crate::objects::GovernanceDetails::Monarchy`] to use a custom governance modal. TODO: add support for other types of gov.",
              "allOf": [
                {
                  "$ref": "#/definitions/GovernanceDetails"
                }
              ]
            },
            "link": {
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "GovernanceDetails": {
      "description": "Governance types",
      "oneOf": [
        {
          "description": "A single address is admin",
          "type": "object",
          "required": [
            "monarchy"
          ],
          "properties": {
            "monarchy": {
              "type": "object",
              "required": [
                "monarch"
              ],
              "properties": {
                "monarch": {
                  "description": "The monarch's address",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "An external governance source",
          "type": "object",
          "required": [
            "external"
          ],
          "properties": {
            "external": {
              "type": "object",
              "required": [
                "governance_address",
                "governance_type"
              ],
              "properties": {
                "governance_address": {
                  "description": "The external contract address",
                  "type": "string"
                },
                "governance_type": {
                  "description": "Governance type used for doing extra off-chain queries depending on the type.",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
