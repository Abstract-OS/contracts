{
  "contract_name": "proxy",
  "contract_version": "0.1.0-rc.2",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "memory_address",
      "os_id"
    ],
    "properties": {
      "memory_address": {
        "type": "string"
      },
      "os_id": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Sets the admin",
        "type": "object",
        "required": [
          "set_admin"
        ],
        "properties": {
          "set_admin": {
            "type": "object",
            "required": [
              "admin"
            ],
            "properties": {
              "admin": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Executes the provided messages if sender is whitelisted",
        "type": "object",
        "required": [
          "module_action"
        ],
        "properties": {
          "module_action": {
            "type": "object",
            "required": [
              "msgs"
            ],
            "properties": {
              "msgs": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CosmosMsg_for_Empty"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds the provided address to whitelisted dapps",
        "type": "object",
        "required": [
          "add_module"
        ],
        "properties": {
          "add_module": {
            "type": "object",
            "required": [
              "module"
            ],
            "properties": {
              "module": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Removes the provided address from the whitelisted dapps",
        "type": "object",
        "required": [
          "remove_module"
        ],
        "properties": {
          "remove_module": {
            "type": "object",
            "required": [
              "module"
            ],
            "properties": {
              "module": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the VAULT_ASSETS map",
        "type": "object",
        "required": [
          "update_assets"
        ],
        "properties": {
          "update_assets": {
            "type": "object",
            "required": [
              "to_add",
              "to_remove"
            ],
            "properties": {
              "to_add": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UncheckedProxyAsset"
                }
              },
              "to_remove": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "BankMsg": {
        "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "send"
            ],
            "properties": {
              "send": {
                "type": "object",
                "required": [
                  "amount",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "to_address": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
            "type": "object",
            "required": [
              "burn"
            ],
            "properties": {
              "burn": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CosmosMsg_for_Empty": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/definitions/BankMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "$ref": "#/definitions/StakingMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "distribution"
            ],
            "properties": {
              "distribution": {
                "$ref": "#/definitions/DistributionMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "wasm"
            ],
            "properties": {
              "wasm": {
                "$ref": "#/definitions/WasmMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DistributionMsg": {
        "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "set_withdraw_address"
            ],
            "properties": {
              "set_withdraw_address": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "description": "The `withdraw_address`",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "withdraw_delegator_reward"
            ],
            "properties": {
              "withdraw_delegator_reward": {
                "type": "object",
                "required": [
                  "validator"
                ],
                "properties": {
                  "validator": {
                    "description": "The `validator_address`",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "StakingMsg": {
        "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "delegate"
            ],
            "properties": {
              "delegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "undelegate"
            ],
            "properties": {
              "undelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "redelegate"
            ],
            "properties": {
              "redelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "dst_validator",
                  "src_validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "dst_validator": {
                    "type": "string"
                  },
                  "src_validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UncheckedProxyAsset": {
        "description": "A proxy asset with unchecked memory entry fields.",
        "type": "object",
        "required": [
          "asset"
        ],
        "properties": {
          "asset": {
            "description": "The asset that's held by the proxy",
            "type": "string"
          },
          "value_reference": {
            "description": "The value reference provides the tooling to get the value of the asset relative to the base asset. If None, the provided asset is set as the base asset. **You can only have one base asset!**",
            "anyOf": [
              {
                "$ref": "#/definitions/UncheckedValueRef"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "UncheckedValueRef": {
        "description": "Provides information on how to calculate the value of an asset",
        "oneOf": [
          {
            "description": "A pool address of an asset/asset pair Both assets must be defined in the Proxy_assets state",
            "type": "object",
            "required": [
              "Pool"
            ],
            "properties": {
              "Pool": {
                "type": "object",
                "required": [
                  "exchange",
                  "pair"
                ],
                "properties": {
                  "exchange": {
                    "type": "string"
                  },
                  "pair": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "LiquidityToken"
            ],
            "properties": {
              "LiquidityToken": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ValueAs"
            ],
            "properties": {
              "ValueAs": {
                "type": "object",
                "required": [
                  "asset",
                  "multiplier"
                ],
                "properties": {
                  "asset": {
                    "type": "string"
                  },
                  "multiplier": {
                    "$ref": "#/definitions/Decimal"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "External"
            ],
            "properties": {
              "External": {
                "type": "object",
                "required": [
                  "api_name"
                ],
                "properties": {
                  "api_name": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WasmMsg": {
        "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
        "oneOf": [
          {
            "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "funds",
                  "msg"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "msg": {
                    "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.16.0-alpha1/x/wasm/internal/types/tx.proto#L47-L61). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "instantiate"
            ],
            "properties": {
              "instantiate": {
                "type": "object",
                "required": [
                  "code_id",
                  "funds",
                  "label",
                  "msg"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "label": {
                    "description": "A human-readbale label for the contract",
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "migrate"
            ],
            "properties": {
              "migrate": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "msg",
                  "new_code_id"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "new_code_id": {
                    "description": "the code_id of the new logic to place in the given contract",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "update_admin"
            ],
            "properties": {
              "update_admin": {
                "type": "object",
                "required": [
                  "admin",
                  "contract_addr"
                ],
                "properties": {
                  "admin": {
                    "type": "string"
                  },
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "clear_admin"
            ],
            "properties": {
              "clear_admin": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns [`ConfigResponse`]",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the total value of all held assets [`TotalValueResponse`]",
        "type": "object",
        "required": [
          "total_value"
        ],
        "properties": {
          "total_value": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the value of one specific asset [`HoldingValueResponse`]",
        "type": "object",
        "required": [
          "holding_value"
        ],
        "properties": {
          "holding_value": {
            "type": "object",
            "required": [
              "identifier"
            ],
            "properties": {
              "identifier": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the amount of specified tokens this contract holds [`HoldingAmountResponse`]",
        "type": "object",
        "required": [
          "holding_amount"
        ],
        "properties": {
          "holding_amount": {
            "type": "object",
            "required": [
              "identifier"
            ],
            "properties": {
              "identifier": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the VAULT_ASSETS value for the specified key [`AssetConfigResponse`]",
        "type": "object",
        "required": [
          "asset_config"
        ],
        "properties": {
          "asset_config": {
            "type": "object",
            "required": [
              "identifier"
            ],
            "properties": {
              "identifier": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`AssetsResponse`]",
        "type": "object",
        "required": [
          "assets"
        ],
        "properties": {
          "assets": {
            "type": "object",
            "properties": {
              "page_size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "page_token": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`ValidityResponse`]",
        "type": "object",
        "required": [
          "check_validity"
        ],
        "properties": {
          "check_validity": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`BaseAssetResponse`]",
        "type": "object",
        "required": [
          "base_asset"
        ],
        "properties": {
          "base_asset": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "asset_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetConfigResponse",
      "type": "object",
      "required": [
        "proxy_asset"
      ],
      "properties": {
        "proxy_asset": {
          "$ref": "#/definitions/ProxyAsset"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "ContractEntry": {
          "description": "Key to get the Address of a contract Use [`UncheckedContractEntry`] to construct this type.",
          "type": "object",
          "required": [
            "contract",
            "protocol"
          ],
          "properties": {
            "contract": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "ProxyAsset": {
          "description": "Every ProxyAsset provides a way to determine its value recursively relative to a base asset.",
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "description": "Asset entry that maps to an AssetInfo using raw-queries on memory",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetEntry"
                }
              ]
            },
            "value_reference": {
              "description": "The value reference provides the tooling to get the value of the asset relative to the base asset.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueRef"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "ValueRef": {
          "description": "Provides information on how to calculate the value of an asset",
          "oneOf": [
            {
              "description": "A pool name of an asset/asset pair Both assets must be defined in the Vault_assets state",
              "type": "object",
              "required": [
                "Pool"
              ],
              "properties": {
                "Pool": {
                  "type": "object",
                  "required": [
                    "pair"
                  ],
                  "properties": {
                    "pair": {
                      "$ref": "#/definitions/ContractEntry"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Liquidity pool token",
              "type": "object",
              "required": [
                "LiquidityToken"
              ],
              "properties": {
                "LiquidityToken": {
                  "type": "object"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Asset will be valued as if they are ValueAs.asset tokens",
              "type": "object",
              "required": [
                "ValueAs"
              ],
              "properties": {
                "ValueAs": {
                  "type": "object",
                  "required": [
                    "asset",
                    "multiplier"
                  ],
                  "properties": {
                    "asset": {
                      "$ref": "#/definitions/AssetEntry"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Query an external contract to get the value",
              "type": "object",
              "required": [
                "External"
              ],
              "properties": {
                "External": {
                  "type": "object",
                  "required": [
                    "api_name"
                  ],
                  "properties": {
                    "api_name": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "assets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsResponse",
      "type": "object",
      "required": [
        "assets"
      ],
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetEntry"
              },
              {
                "$ref": "#/definitions/ProxyAsset"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "ContractEntry": {
          "description": "Key to get the Address of a contract Use [`UncheckedContractEntry`] to construct this type.",
          "type": "object",
          "required": [
            "contract",
            "protocol"
          ],
          "properties": {
            "contract": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "ProxyAsset": {
          "description": "Every ProxyAsset provides a way to determine its value recursively relative to a base asset.",
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "description": "Asset entry that maps to an AssetInfo using raw-queries on memory",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetEntry"
                }
              ]
            },
            "value_reference": {
              "description": "The value reference provides the tooling to get the value of the asset relative to the base asset.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueRef"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "ValueRef": {
          "description": "Provides information on how to calculate the value of an asset",
          "oneOf": [
            {
              "description": "A pool name of an asset/asset pair Both assets must be defined in the Vault_assets state",
              "type": "object",
              "required": [
                "Pool"
              ],
              "properties": {
                "Pool": {
                  "type": "object",
                  "required": [
                    "pair"
                  ],
                  "properties": {
                    "pair": {
                      "$ref": "#/definitions/ContractEntry"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Liquidity pool token",
              "type": "object",
              "required": [
                "LiquidityToken"
              ],
              "properties": {
                "LiquidityToken": {
                  "type": "object"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Asset will be valued as if they are ValueAs.asset tokens",
              "type": "object",
              "required": [
                "ValueAs"
              ],
              "properties": {
                "ValueAs": {
                  "type": "object",
                  "required": [
                    "asset",
                    "multiplier"
                  ],
                  "properties": {
                    "asset": {
                      "$ref": "#/definitions/AssetEntry"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Query an external contract to get the value",
              "type": "object",
              "required": [
                "External"
              ],
              "properties": {
                "External": {
                  "type": "object",
                  "required": [
                    "api_name"
                  ],
                  "properties": {
                    "api_name": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "base_asset": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BaseAssetResponse",
      "type": "object",
      "required": [
        "base_asset"
      ],
      "properties": {
        "base_asset": {
          "$ref": "#/definitions/ProxyAsset"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "ContractEntry": {
          "description": "Key to get the Address of a contract Use [`UncheckedContractEntry`] to construct this type.",
          "type": "object",
          "required": [
            "contract",
            "protocol"
          ],
          "properties": {
            "contract": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "ProxyAsset": {
          "description": "Every ProxyAsset provides a way to determine its value recursively relative to a base asset.",
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "description": "Asset entry that maps to an AssetInfo using raw-queries on memory",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetEntry"
                }
              ]
            },
            "value_reference": {
              "description": "The value reference provides the tooling to get the value of the asset relative to the base asset.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueRef"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "ValueRef": {
          "description": "Provides information on how to calculate the value of an asset",
          "oneOf": [
            {
              "description": "A pool name of an asset/asset pair Both assets must be defined in the Vault_assets state",
              "type": "object",
              "required": [
                "Pool"
              ],
              "properties": {
                "Pool": {
                  "type": "object",
                  "required": [
                    "pair"
                  ],
                  "properties": {
                    "pair": {
                      "$ref": "#/definitions/ContractEntry"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Liquidity pool token",
              "type": "object",
              "required": [
                "LiquidityToken"
              ],
              "properties": {
                "LiquidityToken": {
                  "type": "object"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Asset will be valued as if they are ValueAs.asset tokens",
              "type": "object",
              "required": [
                "ValueAs"
              ],
              "properties": {
                "ValueAs": {
                  "type": "object",
                  "required": [
                    "asset",
                    "multiplier"
                  ],
                  "properties": {
                    "asset": {
                      "$ref": "#/definitions/AssetEntry"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Query an external contract to get the value",
              "type": "object",
              "required": [
                "External"
              ],
              "properties": {
                "External": {
                  "type": "object",
                  "required": [
                    "api_name"
                  ],
                  "properties": {
                    "api_name": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "check_validity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ValidityResponse",
      "type": "object",
      "properties": {
        "missing_dependencies": {
          "description": "Assets that are missing in the VAULT_ASSET map which caused some assets to be unresolvable.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AssetEntry"
          }
        },
        "unresolvable_assets": {
          "description": "Assets that have unresolvable dependencies in their value calculation",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AssetEntry"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "modules"
      ],
      "properties": {
        "modules": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "holding_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HoldingAmountResponse",
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "holding_value": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HoldingValueResponse",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "total_value": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TotalValueResponse",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
