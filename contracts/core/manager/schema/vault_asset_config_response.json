{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "VaultAssetConfigResponse",
  "type": "object",
  "required": [
    "value"
  ],
  "properties": {
    "value": {
      "$ref": "#/definitions/ProxyAsset"
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetBase_for_Addr": {
      "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: [`info`], which specifies the asset's type (CW20 or native), and its [`amount`], which specifies the asset's amount",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Specifies the asset's amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Specifies the asset's type (CW20 or native)",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfoBase_for_Addr"
            }
          ]
        }
      }
    },
    "AssetInfoBase_for_Addr": {
      "description": "Represents the type of an fungible asset\n\nEach **asset info** instance can be one of two variants:\n\n- CW20 tokens. To create an **asset info** instance of this type, provide the contract address. - Native SDK coins. To create an **asset info** instance of this type, provide the denomination.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "ProxyAsset": {
      "description": "Every ProxyAsset provides a way to determine its value recursivly relative to a base asset. This is subject to change as Chainlink an/or TWAP implementations roll out on terra.",
      "type": "object",
      "required": [
        "asset"
      ],
      "properties": {
        "asset": {
          "$ref": "#/definitions/AssetBase_for_Addr"
        },
        "value_reference": {
          "anyOf": [
            {
              "$ref": "#/definitions/ValueRef"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "ValueRef": {
      "oneOf": [
        {
          "description": "A pool address of an asset/asset pair Both assets must be defined in the Vault_assets state",
          "type": "object",
          "required": [
            "pool"
          ],
          "properties": {
            "pool": {
              "type": "object",
              "required": [
                "pair_address"
              ],
              "properties": {
                "pair_address": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "liquidity"
          ],
          "properties": {
            "liquidity": {
              "type": "object",
              "required": [
                "pool_address"
              ],
              "properties": {
                "pool_address": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "proxy"
          ],
          "properties": {
            "proxy": {
              "type": "object",
              "required": [
                "multiplier",
                "proxy_asset"
              ],
              "properties": {
                "multiplier": {
                  "$ref": "#/definitions/Decimal"
                },
                "proxy_asset": {
                  "$ref": "#/definitions/AssetInfoBase_for_Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "external"
          ],
          "properties": {
            "external": {
              "type": "object",
              "required": [
                "contract_address"
              ],
              "properties": {
                "contract_address": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
